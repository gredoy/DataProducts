weather <- c("rain", "storm", "sun", "cloud", "hot", "cold",
"dry", "wet", "windy", "hurricane", "typhoon",
"sand storms", "snow storms", "tornado", "humid",
"fog", "snow", "thundersnow", "hail", "sleet",
"drought", "wildfire", "blizzard", "avalanche",
"mist", "freez", "dust", "flood", "other")
```
Create a new data frame - dataSummary - to record the aggregate
results of weather incident counts, fatalities, injuries, property damage, crop damage and total damage for each of the above weather conditions.
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
incidentTotal <- vector(mode="numeric", length=length(weather))
fatalitiesTotal <-vector(mode="numeric", length=length(weather))
injuriesTotal <-vector(mode="numeric", length=length(weather))
propDmgTotal <-vector(mode="numeric", length=length(weather))
cropDmgTotal <-vector(mode="numeric", length=length(weather))
damageTotal <-vector(mode="numeric", length=length(weather))
dataSummary <- data.frame(weather, incidentTotal,
fatalitiesTotal, injuriesTotal,
propDmgTotal, cropDmgTotal, damageTotal)
```
Function to determine the multiplier's numerical value from the
propdmgexp and cropdmgexp columns in the data1 dataframe
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
multiplier <- function(letter) {
#Return the multiplier letter's numerical value
#If the multiplier is not one of h/H, k/K, m/M, and b/B,
#the function returns 1
multiplier <- 1
if (grepl('h', tolower(letter))) multiplier <- 100
else if (grepl('k', tolower(letter))) multiplier <- 1000
else if (grepl('m', tolower(letter))) multiplier <- 1000000
else if (grepl('b', tolower(letter))) multiplier <- 1000000000
multiplier
}
```
Populate the dataSummary data frame with the aggregate results
for each of the categories - fatalities, injuries, property
damage, crop damage and total damage - for each of the 28 weather
conditions.
The major simplifying assumption in our analysis is to ignore
the rows in data1 where:
* propdmgexp is not one of h/H, k/K, m/M, and b/B
* cropdmgexp is not one of h/H, k/K, m/M, and b/B
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
for (row in seq(data1$evtype)) {
instance <- tolower(data1$evtype[row])
propMultiplier <- multiplier(data1$propdmgexp[row])
cropMultiplier <- multiplier(data1$cropdmgexp[row])
#print(row)
if (propMultiplier== 1 || cropMultiplier==1) {
next
}
iteration <- 0
for (index in seq(dataSummary$weather)) {
condition <- dataSummary$weather[index]
iteration <- iteration + 1
found = grepl(condition, instance)
if (found) {
data1$evtype[row] = condition
dataSummary$incidentTotal[index] = dataSummary$incidentTotal[index] + 1
dataSummary$fatalitiesTotal[index] = dataSummary$fatalitiesTotal[index] + data1$fatalities[row]
dataSummary$injuriesTotal[index] = dataSummary$injuriesTotal[index] + data1$injuries[row]
dataSummary$propDmgTotal[index] = dataSummary$propDmgTotal[index] + (data1$propdmg[row] * propMultiplier)
dataSummary$cropDmgTotal[index] = dataSummary$cropDmgTotal[index] + (data1$cropdmg[row] * cropMultiplier)
dataSummary$damageTotal[index] = dataSummary$damageTotal[index] + (dataSummary$propDmgTotal[index] + dataSummary$cropDmgTotal[index])
#print(condition)
break
}
else if (!found & iteration==29) {
data1$evtype[row] = condition
dataSummary$incidentTotal[index] = dataSummary$incidentTotal[index] + 1
dataSummary$fatalitiesTotal[index] = dataSummary$fatalitiesTotal[index] + data1$fatalities[row]
dataSummary$injuriesTotal[index] = dataSummary$injuriesTotal[index] + data1$injuries[row]
dataSummary$propDmgTotal[index] = dataSummary$propDmgTotal[index] + (data1$propdmg[row] * propMultiplier)
dataSummary$cropDmgTotal[index] = dataSummary$cropDmgTotal[index] + (data1$cropdmg[row] * cropMultiplier)
dataSummary$damageTotal[index] = dataSummary$damageTotal[index] + (dataSummary$propDmgTotal[index] + dataSummary$cropDmgTotal[index])
#print(condition)
}
}
}
```
Please be advised that the above chunk of code requires a large amount of time to execute and produce an output. Therefore, it was not evaluated when generating the Rmd document.
Save the dataSummary containing the aggregate data in a .csv filein case we need the processed data again and if we do not want to wait for the time consuming processing to repeat itself. This will especially come in handy when generating the Rmd document.
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
write.csv(file='cleanData.csv', x=dataSummary)
```
Starting at this point, the following R code chunks are evaluated in knitr when knitting the document
Read in the cleaned up data from the cleanData.csv file into R
```{r}
newData <- read.csv("cleanData.csv")
```
The columns and data in the newData dataframe
```{r}
names(newData)
head(newData)
```
Create a new data frame newData1 with an additional column that contains the total human injuries and fatalities due to each event
```{r}
injuriesFatalitiesTotal <- newData$injuriesTotal + newData$fatalitiesTotal
newData1 <- cbind(newData[,2:3], newData$injuriesTotal,
newData$fatalitiesTotal, injuriesFatalitiesTotal,
newData[,6:8])
```
Re-name the columns in newData1
```{r}
names(newData1) <- c("weather", "incidentCount", "injuries",
"fatalities", "injuryFatalityTotal",
"propertyDamage", "cropDamage", "damageTotal")
```
The columns and data in the newData1 dataframe
```{r}
names(newData1)
head(newData1)
```
# Results
### Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
In determining events that are the most harmful with respect to human health, we would consider the injury and fatality data.
Pie chart of the top 5 events corresponding to the effect on
injuries and fatalities combined
Initialize the margin and plotting parameters
```{r}
par(mar=c(2,2,3,1))
par(mfrow=c(1,1))
```
Install the 3D pie chart package "plotrix" (if necessary) and then load it
```{r}
#install.packages("plotrix")
library("plotrix")
```
Plot the 3D pie chart of the top 5 events that caused the most damage to
humans and their health (in terms of injuries and fatalties) in the past
```{r}
X <- newData1[order(newData1$injuryFatalityTotal, decreasing=TRUE),][1:5,]
labels <- paste(X$weather, "\n", X$injuryFatalityTotal)
pie3D(X$injuryFatalityTotal, labels = labels, main="Consequences to Human Health and Lives\n due to the Top 5 Weather Events", labelcex=1.2)
```
**Based on the numbers above, the most devastating/harmful events for human health are tornadoes, followed by floods, others, storms, and lastly, hurricanes.
Please note that "other" includes a variety of weather events that were not categorized into specific events due to the report objectives are to identify important ones.
### Across the United States, which types of events have the greatest economic consequences?
In determining the events with the greatest economic consequences, we would consider the property and crop damage data.
Pie chart of the top 5 events with the greatest economic
consequences
Plot the 3D pie chart of the top 5 events that had the most effect on the economy in the past
```{r}
Y <- newData1[order(newData1$damageTotal, decreasing=TRUE),][1:5,]
damageInTrillions <- round(Y$damageTotal/1e+12)
labels <- paste(Y$weather, "\n", damageInTrillions)
pie3D(damageInTrillions, labels = labels, main="Consequences of the Top 5\n Weather Events on the Economy (in Trillions of Dollars)", labelcex=1.2)
```
**Based on the numbers above, the most costly/economically consequential events are floods, followed by storms, hails, others, and lastly, tornadoes.
Please note that "other" includes a variety of weather events that were not categorized into specific events due to the data.
### (Additional analysis) Across the United States, which types of events occured the most?
Pie chart of the top 5 events with the highest frequency
Plot the 3D pie chart of the top 5 events that occured the most in the past
```{r}
Z <- newData1[order(newData1$incidentCount, decreasing=TRUE),][1:5,]
labels <- paste(Z$weather, "\n", Z$incidentCount)
pie3D(Z$incidentCount, labels = labels, main="5 Highest Occuring Weather Events in the\n United States between 1950 and 2011", labelcex=1.2)
```
**Based on the numbers above, the events that happened the most in the past are storms, followed by hails, floods, others, and lastly, tornadoes.
Please note that "other" includes a variety of weather events that were not categorized into specific events due to the data analyst's lack of skills in doing so.
---
Reproducible Research Project 2: Severe Weather Events Analysis in the United States
===================================================================
All the documents and code used in this project can be found at
[this] http://github/gredoy/RDATA_P-2 Github repository. If the link does not work, please copy and paste the following url into your browser:http://github/gredoy/RDATA_P-2
# Synopsis
In this analysis project, we explored the aftemath of severe weather events in the US over the past 60 years (1950-2011). We particularly consider the events that have caused the most harmful effects on human health (in terms of injury and fatatlity) and the greatest economic impact (interms of property and crop damage). After acquiring the data of about one million records, we pre-processed it by considering 28 well-defined major weather events and classifying the data accordingly. Any event that our search and match algorithm failed to identify was labelled as "other". Next, we counted the occurence of each event, the total injuries and fatalities it caused, and the resultant total property and crop damage. We summed up the injuries and fatalities for a quantitative estimate of the effect on human lives and also determined the total economic cost of the event my adding up the proerty and crop damage costs. Our analysis revealed that tornado was the most the devastating event account
ing for about 13,049 injuries and human lives. As for economy, flood had the most effect amounting to about 4,768 Trillion Dollars. In addition, we also determined that the event with the highest frequency in the United States was storm with over 96,000 counts.
# Data Processing
Please note that, unless stated otherwise, all R codes in the Data Processing section of this report are not actually evaluated when generating the Rmd file to save time from the lengthy processing that is required
Read in the database file into R
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
fileName <- "repdata-data-StormData.csv.bz2"
data <- read.csv(fileName)
```
Create a new dataframe with the columns EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMGEXP and CROPDMG from data
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
data1 <- data.frame(data$EVTYPE, data$FATALITIES, data$INJURIES,
data$PROPDMG, data$PROPDMGEXP, data$CROPDMG, data$CROPDMGEXP)
```
Re-name the columns in the data1 data frame
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
names(data1) <- tolower(c("EVTYPE", "FATALITIES", "INJURIES", "PROPDMG","PROPDMGEXP", "CROPDMG", "CROPDMGEXP"))
```
Turn the elements in the evtype, propdmgexp and cropdmgexp columns
from factor into character
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
data1[,1] <- as.character(data1$evtype)
data1[,5] <- as.character(data1$propdmgexp)
data1[,7] <- as.character(data1$cropdmgexp)
```
Please note that we will ignore the multipliers for property
damage (PROPDMGEXP) and cropdamage (CROPDMGEXP) unless they are one of h/H (hundred), k/K (thousand), m/M (million) or b/B (billion).
There are two reasons for doing so.
1. We could not determime the meaning of the other values (such
as, "0", "1", "2" etc.) in the PROPDMGEXP and CROPDMGEXP columns.
2. Including multipliers other than h, k, m or b in our analysis
drastically increases our processing time which we are
unable to afford with our computer's limited processing power and the project deadline.
Therefore, please be advised that our analysis and result
interpretation that follows may not be precise or entirely correct
28 weather types considered (please not that the following weather
condition listing is not exhaustive). Other unrecognized weather
conditions are considered under "other"
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
weather <- c("rain", "storm", "sun", "cloud", "hot", "cold",
"dry", "wet", "windy", "hurricane", "typhoon",
"sand storms", "snow storms", "tornado", "humid",
"fog", "snow", "thundersnow", "hail", "sleet",
"drought", "wildfire", "blizzard", "avalanche",
"mist", "freez", "dust", "flood", "other")
```
Create a new data frame - dataSummary - to record the aggregate
results of weather incident counts, fatalities, injuries, property damage, crop damage and total damage for each of the above weather conditions.
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
incidentTotal <- vector(mode="numeric", length=length(weather))
fatalitiesTotal <-vector(mode="numeric", length=length(weather))
injuriesTotal <-vector(mode="numeric", length=length(weather))
propDmgTotal <-vector(mode="numeric", length=length(weather))
cropDmgTotal <-vector(mode="numeric", length=length(weather))
damageTotal <-vector(mode="numeric", length=length(weather))
dataSummary <- data.frame(weather, incidentTotal,
fatalitiesTotal, injuriesTotal,
propDmgTotal, cropDmgTotal, damageTotal)
```
Function to determine the multiplier's numerical value from the
propdmgexp and cropdmgexp columns in the data1 dataframe
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
multiplier <- function(letter) {
#Return the multiplier letter's numerical value
#If the multiplier is not one of h/H, k/K, m/M, and b/B,
#the function returns 1
multiplier <- 1
if (grepl('h', tolower(letter))) multiplier <- 100
else if (grepl('k', tolower(letter))) multiplier <- 1000
else if (grepl('m', tolower(letter))) multiplier <- 1000000
else if (grepl('b', tolower(letter))) multiplier <- 1000000000
multiplier
}
```
Populate the dataSummary data frame with the aggregate results
for each of the categories - fatalities, injuries, property
damage, crop damage and total damage - for each of the 28 weather
conditions.
The major simplifying assumption in our analysis is to ignore
the rows in data1 where:
* propdmgexp is not one of h/H, k/K, m/M, and b/B
* cropdmgexp is not one of h/H, k/K, m/M, and b/B
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
for (row in seq(data1$evtype)) {
instance <- tolower(data1$evtype[row])
propMultiplier <- multiplier(data1$propdmgexp[row])
cropMultiplier <- multiplier(data1$cropdmgexp[row])
#print(row)
if (propMultiplier== 1 || cropMultiplier==1) {
next
}
iteration <- 0
for (index in seq(dataSummary$weather)) {
condition <- dataSummary$weather[index]
iteration <- iteration + 1
found = grepl(condition, instance)
if (found) {
data1$evtype[row] = condition
dataSummary$incidentTotal[index] = dataSummary$incidentTotal[index] + 1
dataSummary$fatalitiesTotal[index] = dataSummary$fatalitiesTotal[index] + data1$fatalities[row]
dataSummary$injuriesTotal[index] = dataSummary$injuriesTotal[index] + data1$injuries[row]
dataSummary$propDmgTotal[index] = dataSummary$propDmgTotal[index] + (data1$propdmg[row] * propMultiplier)
dataSummary$cropDmgTotal[index] = dataSummary$cropDmgTotal[index] + (data1$cropdmg[row] * cropMultiplier)
dataSummary$damageTotal[index] = dataSummary$damageTotal[index] + (dataSummary$propDmgTotal[index] + dataSummary$cropDmgTotal[index])
#print(condition)
break
}
else if (!found & iteration==29) {
data1$evtype[row] = condition
dataSummary$incidentTotal[index] = dataSummary$incidentTotal[index] + 1
dataSummary$fatalitiesTotal[index] = dataSummary$fatalitiesTotal[index] + data1$fatalities[row]
dataSummary$injuriesTotal[index] = dataSummary$injuriesTotal[index] + data1$injuries[row]
dataSummary$propDmgTotal[index] = dataSummary$propDmgTotal[index] + (data1$propdmg[row] * propMultiplier)
dataSummary$cropDmgTotal[index] = dataSummary$cropDmgTotal[index] + (data1$cropdmg[row] * cropMultiplier)
dataSummary$damageTotal[index] = dataSummary$damageTotal[index] + (dataSummary$propDmgTotal[index] + dataSummary$cropDmgTotal[index])
#print(condition)
}
}
}
```
Please be advised that the above chunk of code requires a large amount of time to execute and produce an output. Therefore, it was not evaluated when generating the Rmd document.
Save the dataSummary containing the aggregate data in a .csv filein case we need the processed data again and if we do not want to wait for the time consuming processing to repeat itself. This will especially come in handy when generating the Rmd document.
```{r cache=TRUE, cache.lazy=TRUE, eval=FALSE}
write.csv(file='cleanData.csv', x=dataSummary)
```
Starting at this point, the following R code chunks are evaluated in knitr when knitting the document
Read in the cleaned up data from the cleanData.csv file into R
```{r}
newData <- read.csv("cleanData.csv")
```
The columns and data in the newData dataframe
```{r}
names(newData)
head(newData)
```
Create a new data frame newData1 with an additional column that contains the total human injuries and fatalities due to each event
```{r}
injuriesFatalitiesTotal <- newData$injuriesTotal + newData$fatalitiesTotal
newData1 <- cbind(newData[,2:3], newData$injuriesTotal,
newData$fatalitiesTotal, injuriesFatalitiesTotal,
newData[,6:8])
```
Re-name the columns in newData1
```{r}
names(newData1) <- c("weather", "incidentCount", "injuries",
"fatalities", "injuryFatalityTotal",
"propertyDamage", "cropDamage", "damageTotal")
```
The columns and data in the newData1 dataframe
```{r}
names(newData1)
head(newData1)
```
# Results
### Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
In determining events that are the most harmful with respect to human health, we would consider the injury and fatality data.
Pie chart of the top 5 events corresponding to the effect on
injuries and fatalities combined
Initialize the margin and plotting parameters
```{r}
par(mar=c(2,2,3,1))
par(mfrow=c(1,1))
```
Install the 3D pie chart package "plotrix" (if necessary) and then load it
```{r}
#install.packages("plotrix")
library("plotrix")
```
Plot the 3D pie chart of the top 5 events that caused the most damage to
humans and their health (in terms of injuries and fatalties) in the past
```{r}
X <- newData1[order(newData1$injuryFatalityTotal, decreasing=TRUE),][1:5,]
labels <- paste(X$weather, "\n", X$injuryFatalityTotal)
pie3D(X$injuryFatalityTotal, labels = labels, main="Consequences to Human Health and Lives\n due to the Top 5 Weather Events", labelcex=1.2)
```
**Based on the numbers above, the most devastating/harmful events for human health are tornadoes, followed by floods, others, storms, and lastly, hurricanes.
Please note that "other" includes a variety of weather events that were not categorized into specific events due to the report objectives are to identify important ones.
### Across the United States, which types of events have the greatest economic consequences?
In determining the events with the greatest economic consequences, we would consider the property and crop damage data.
Pie chart of the top 5 events with the greatest economic
consequences
Plot the 3D pie chart of the top 5 events that had the most effect on the economy in the past
```{r}
Y <- newData1[order(newData1$damageTotal, decreasing=TRUE),][1:5,]
damageInTrillions <- round(Y$damageTotal/1e+12)
labels <- paste(Y$weather, "\n", damageInTrillions)
pie3D(damageInTrillions, labels = labels, main="Consequences of the Top 5\n Weather Events on the Economy (in Trillions of Dollars)", labelcex=1.2)
```
**Based on the numbers above, the most costly/economically consequential events are floods, followed by storms, hails, others, and lastly, tornadoes.
Please note that "other" includes a variety of weather events that were not categorized into specific events due to the data.
### (Additional analysis) Across the United States, which types of events occured the most?
Pie chart of the top 5 events with the highest frequency
Plot the 3D pie chart of the top 5 events that occured the most in the past
```{r}
Z <- newData1[order(newData1$incidentCount, decreasing=TRUE),][1:5,]
labels <- paste(Z$weather, "\n", Z$incidentCount)
pie3D(Z$incidentCount, labels = labels, main="5 Highest Occuring Weather Events in the\n United States between 1950 and 2011", labelcex=1.2)
```
**Based on the numbers above, the events that happened the most in the past are storms, followed by hails, floods, others, and lastly, tornadoes.
Please note that "other" includes a variety of weather events that were not categorized into specific events due to the data analyst's lack of skills in doing so.
x<-c(0.61,.93,0.83,0.35,0.54,0.16,0.91,0.62,0.62)
y<-c(0.67,0.84,0.6,0.18,0.85,0.47,1.1,0.65,0.36)
lm(x,y)
?lm
x<-c(0.61,.93,0.83,0.35,0.54,0.16,0.91,0.62,0.62)
y<-c(0.67,0.84,0.6,0.18,0.85,0.47,1.1,0.65,0.36)
lm(x~y)
x<-c(0.61,.93,0.83,0.35,0.54,0.16,0.91,0.62,0.62)
y<-c(0.67,0.84,0.6,0.18,0.85,0.47,1.1,0.65,0.36)
lm(y~x)
x<-c(0.61,.93,0.83,0.35,0.54,0.16,0.91,0.62,0.62)
y<-c(0.67,0.84,0.6,0.18,0.85,0.47,1.1,0.65,0.36)
Model<-lm(y~x)
anova(Model)
summary(Model)
x<-c(0.61,.93,0.83,0.35,0.54,0.16,0.91,0.62,0.62)
y<-c(0.67,0.84,0.6,0.18,0.85,0.47,1.1,0.65,0.36)
Model<-lm(x~y)
anova(Model)
summary(Model)
data(mtcars)
names(mtcars)
predict(lm(mpg~wt))
data(mtcars)
names(mtcars)
predict(lm(mpg~wt))
predict(lm(mtcars$mpg~mtcars$wt))
data(mtcars)
names(mtcars)
predict(lm(mtcars$mpg~mtcars$wt),interval=c("confidence"))
library("datasets", lib.loc="C:/Program Files/R/R-3.0.2/library")
data(mtcars)
names(mtcars)
predict(lm(mtcars$mpg~mtcars$wt),interval=c("confidence"))
library("RcmdrPlugin.BCA", lib.loc="~/R/win-library/3.0")
data(mtcars)
names(mtcars)
predict(lm(mtcars$mpg~mtcars$wt),interval=c("prediction"))
data(mtcars)
names(mtcars)
predict(lm(mtcars$mpg~mtcars$wt),newdata=3,interval=c("prediction"),level=.95)
data(mtcars)
fit<-lm(mpg~wt)
xVals<-c(2,3)
newdata<-data.frame(x=xVals)
p1<-predict(fit,newdata,interval=("confidence"))
p2<-predict(fit,newdata,interval=("prediction"))
plot(x,y,frame=FALSE,xlab="Carat",ylab="Dollars",pch=21,col="black",bg="lightblue",cex=2)
abline(fit,lwd=2)
lines(xVals,p1[,2]);lines(xVals,p1[,3])
lines(xVals,p2[,2]);lines(xVals,p2[,3])
data(mtcars)
fit<-lm(mtcars$mpg~mtcars$wt)
xVals<-c(2,3)
newdata<-data.frame(x=xVals)
p1<-predict(fit,newdata,interval=("confidence"))
p2<-predict(fit,newdata,interval=("prediction"))
plot(x,y,frame=FALSE,xlab="Carat",ylab="Dollars",pch=21,col="black",bg="lightblue",cex=2)
abline(fit,lwd=2)
lines(xVals,p1[,2]);lines(xVals,p1[,3])
lines(xVals,p2[,2]);lines(xVals,p2[,3])
data(mtcars)
fit<-lm(mtcars$mpg~mtcars$wt)
xVals<-seq(min(mtcars$wt),max(mtcars$wt),by =1)
newdata<-data.frame(x=xVals)
p1<-predict(fit,newdata,interval=("confidence"))
p2<-predict(fit,newdata,interval=("prediction"))
plot(x,y,frame=FALSE,xlab="Carat",ylab="Dollars",pch=21,col="black",bg="lightblue",cex=2)
abline(fit,lwd=2)
lines(xVals,p1[,2]);lines(xVals,p1[,3])
lines(xVals,p2[,2]);lines(xVals,p2[,3])
library(swirl
library(swirl)
swirl()
swirl()
swirl()
data(galton)
fit<-(lm(child~parent, galton)
fit<-(lm(child~parent, galton)
fit<-(lm(child~parent, galton))
summary(fit)
mean(fit$residuals)
cov(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
swirl()
swirl()
q()
data(mtcars)
Fit<-lm(mpg~wt+factor(cyl))
Fit<-lm(mtcars$mpg~mtcars$wt+factor(mtcars$cyl))
fit$coeff
Fit$coeff
summary(Fit)
?deviance
??deviance
library("caret", lib.loc="~/R/win-library/3.0")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData=data.frame(diagnosis,predictors)
testIndex=createDataPartition(diagnosis,p=.50,list=FALSE)
training= adData[testIndex]
testing= adData[-testIndex]
dim(training)
dim(testIndex)
dim(-testIndex)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
library("RcmdrPlugin.BCA", lib.loc="~/R/win-library/3.0")
x<-c(1,2,2,3,4,5,6,6,3,5)
mean(x)
median(x)
mode(x)
table(x)
x<-c(1,2,2,3,4,5,6,6,3,5,3,3)
table(x)
mode(x)
mode(x)=maximum(table(x))
var(x)
sd(x0)
sd(x)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
anipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
install.packages("shiny")
library(shiny)
library("shiny")
install.packages("shiny")
install.packages("Rtools")
install.packages("rtools")
source('C:/Users/gredy/Downloads/Machine Learning/project_ML_W.R')
setwd("~/GitHub/DataProduct")
shiny::runApp()
